import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import Bank from './Bank';

// Mock the data.json file - we mock data in the tests because technically, they cannot be generated by the render function alone
// jest.mock(fileToBeMocked, mockedData);
jest.mock('../../assets/data.json', () => [
  {
    "id": 0,
    "name": "john",
    "balance": 50000
  },
  {
    "id": 1,
    "name": "anne",
    "balance": 40000
  }, 
  {
    "id": 2,
    "name": "elle",
    "balance": 60000
  }
]);

// describe(description, callback function);
describe('Bank Component', () => {
  describe('Transfer Money - Successful Transaction', () => {
    test('should successfully transfer money between valid users', async () => {
      // Render the Bank component
      render(<Bank />);

      // Verify that initial balances are displayed
      expect(screen.getByText("john - 50000")).toBeInTheDocument();
      expect(screen.getByText("anne - 40000")).toBeInTheDocument();
      expect(screen.getByText("elle - 60000")).toBeInTheDocument();

      // We want to show the show transfer money form
      const showTransferButton = screen.getByRole('button', { name: /show transfer money/i });
      // fireEvent - mimics user action but is more lightweight
      fireEvent.click(showTransferButton);

      // Verify if the form is showing
      expect(screen.getByPlaceholderText(/enter name/i)).toBeInTheDocument();
      expect(screen.getByText(/receiver/i)).toBeInTheDocument();
      expect(screen.getByText(/amount/i)).toBeInTheDocument();

      // Fill in the form
      const senderInput = screen.getByPlaceholderText(/enter name/i);
      // spinbutton - role of input type=number
      // 2nd parameter is optional because it's the only input type=number that we have
      const amountInput = screen.getByRole('spinbutton');
      // array that contains all elements that has role=textbox
      const textInputs = screen.getAllByRole('textbox');
      // finding the receiver input field
      const receiverInput = textInputs.find(input => input !== senderInput);

      // fireEvent.change(element to be changed, attribute to update)
      fireEvent.change(senderInput, { target: { value: 'john' } });
      fireEvent.change(receiverInput, { target: { value: 'anne' } });
      fireEvent.change(amountInput, { target: { value: '10000' } });

      // Verify if the inputs are filled correctly
      expect(senderInput).toHaveValue('john');
      expect(receiverInput).toHaveValue('anne');
      expect(amountInput).toHaveValue(10000);

      // Submit the form
      const confirmButton = screen.getByRole('button', { name: /confirm transfer/i });
      fireEvent.click(confirmButton);

      // john loses 10000 - 40000
      // anne gains 10000 - 50000
      expect(screen.getByText("john - 40000")).toBeInTheDocument();
      expect(screen.getByText("anne - 50000")).toBeInTheDocument();

      // await for complex functions

      // await waitFor(() => {
      //   expect(screen.getByText("john - 40000")).toBeInTheDocument();
      // });
      // expect(screen.getByText("anne - 50000")).toBeInTheDocument();
    });
  });
});
